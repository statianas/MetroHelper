#include <bits\stdc++.h>
#include <iostream>
#include <time.h>
#include <chrono>
#include <locale.h>
using namespace std;

vector<int> Levit_Algorithm(int s, vector<vector<pair<int,int>>> &graph) {
    int n = graph.size();
    vector <int> ID(n, 0); //чтобы понять есть ли элемент в одной из очереди
    unordered_set <int> M_0;
    unordered_set <int> M_2;
    queue <int> M_1, M_11;
    for (int i = 0; i<n && i != s;i++) {
        M_2.insert(i);
    }
    vector<int> d (n, INF); d[s] = 0;
    M_11.push(s); ID[s] = 1;  //добавили s в срочную очередь
    int u, v, len; //вспомогательные переменные
    while (!M_1.empty() || !M_11.empty()) {
        if (M_11.empty()) {u = M_1.front(); M_1.pop(); ID[u] = 0;}
        else {u = M_11.front(); M_11.pop(); ID[u] = 0;}

        for (int j=0; j<graph[u].size(); ++j) {
            v = graph[u][j].first;
            len = graph[u][j].second; //вес ребра между u и v
            if (d[v] == INF) {        //то есть расстояние до нее еще не вычислено
                M_1.push(v); ID[v] = 1;
                M_2.erase(v);
                d[v] = min(d[v], d[u] + len);
            }
            else if (ID[v] == 1) d[v] = min(d[v], d[u] + len);//вершина v  одной из очередей
            else if (d[v] != INF && d[v] > d[u] + len) {      //расстояние до v уже было вычислено
                M_11.push(v); ID[v] = 1;
                M_0.erase(v);
                d[v] = d[u] + len;
            }
        }

    }
    return d;
}

vector<int> Levit_Algorithm_path(int s, vector<vector<pair<int,int>>> &graph, int k, vector <string> &name_of_station) { //k - конечный пункт назначения
    int num = graph.size();
    vector <int> ID(num, 0); //чтобы понять есть ли элемент в одной из очереди
    unordered_set <int> M_0;
    unordered_set <int> M_2;
    queue <int> M_1, M_11;
    for (int i = 0; i<num && i != s;i++) {
        M_2.insert(i);
    }
    vector<int> d (num, INF), p (num, -1); d[s] = 0;  // p - для восстановления пути
    M_11.push(s); ID[s] = 1;  //добавили s в срочную очередь
    int u, v, len; //вспомогательные переменные
    while (!M_1.empty() || !M_11.empty()) {
        if (M_11.empty()) {u = M_1.front(); M_1.pop(); ID[u] = 0;}
        else {u = M_11.front(); M_11.pop(); ID[u] = 0;}

        for (int j=0; j<graph[u].size(); ++j) {
            v = graph[u][j].first;
            len = graph[u][j].second; //вес ребра между u и v
            if (d[v] == INF) { //то есть расстояние до нее еще не вычислено
                M_1.push(v); ID[v] = 1;
                M_2.erase(v);
                d[v] = min(d[v], d[u] + len);
                if (d[v] == d[u] + len)  p[v] = u;
            }
            else if (ID[v] == 1) {d[v] = min(d[v], d[u] + len); if (d[v] == d[u] + len)  p[v] = u;}
            else if (d[v] != INF && d[v] > d[u] + len) {
                M_11.push(v); ID[v] = 1;
                M_0.erase(v);
                d[v] = d[u] + len;
                p[v] = u;
            }
        }

    }
    vector<int> path;
    for (int vertex = k; vertex != -1; vertex = p[vertex])
        path.push_back (vertex);
    reverse (path.begin(), path.end());
    for (size_t i = 0; i < path.size(); ++i) {
        if (i == path.size() - 1) cout << name_of_station[path[i]];
        else cout << name_of_station[path[i]] << "->" << ' ';
    }
    cout << '\n' << "Время в пути:" << ' ' << d[k] << ' ' << "мин.";
    return d;
}

/*
    ------------------------------- Красная ветка
    Девяткино-0
    Гражданский проспект-1
    Академическая-2
    Политехническая-3
    Площадь Мужества-4
    Лесная-5
    Выборгская-6
    Площадь Ленина-7
    Чернышевская-8
    Площадь Восстания-9
    Владимирская-10
    Пушкинская-11
    Технологический институт-12
    Балтийская-13
    Нарвская-14
    Кировский завод-15
    Автово-16
    Ленинский проспект-17
    Проспект Ветеранов-18
    ------------------------------- Синяя ветка
    Парнас-19
    Проспект Просвещения-20
    Озерки-21
    Удельная-22
    Пионерская-23
    Чёрная речка-24
    Петроградская-25
    Горьковская-26
    Невский проспект-27
    Сенная площадь-28
    Технологический институт-29
    Фрунзенская-30
    Московские ворота-31
    Электросила-32
    Парк Победы-33
    Московская-34
    Звёздная-35
    Купчино-36
    ------------------------------- Зелёная ветка
    Беговая-37
    Зенит-38
    Приморская-39
    Василеостровская-40
    Гостиный двор-41
    Маяковская-42
    Площадь Александра Невского-43
    Елизаровская-44
    Ломоносовская-45
    Пролетарская-46
    Обухово-47
    Рыбацкое-48
    ------------------------------- Оранжевая ветка
    Спасская-49
    Достоевская-50
    Лиговский проспект-51
    Площадь Александра Невского-52
    Новочеркасская-53
    Ладожская-54
    Проспект Большевиков-55
    Улица Дыбенко-56
    ------------------------------- Фиолетовая ветка
    Комендантский проспект-57
    Старая Деревня-58
    Крестовский остров-59
    Чкаловская-60
    Спортивная-61
    Адмиралтейская-62
    Садовая-63
    Звенигородская-64
    Обводный канал-65
    Волковская-66
    Бухарестская-67
    Международная-68
    Проспект Славы-69
    Дунайская-70
    Шушары - 71
 */

int main() {
    // s - начало пути (номер станции), k - конец пути (номер станции)
    setlocale( LC_ALL,"Russian" );
    vector <string> name_of_station = {"Девяткино", "Гражданский проспект", "Академическая", "Политехническая", "Площадь Мужества", "Лесная", "Выборгская", "Площадь Ленина", "Чернышевская", "Площадь Восстания", "Владимирская", "Пушкинская", "Технологический институт", "Балтийская", "Нарвская", "Кировский завод", "Автово", "Ленинский проспект", "Проспект Ветеранов", "Парнас", "Проспект Просвещения", "Озерки", "Удельная", "Пионерская", "Чёрная речка", "Петроградская", "Горьковская", "Невский проспект", "Сенная площадь", "Технологический институт", "Фрунзенская", "Московские ворота", "Электросила", "Парк Победы", "Московская", "Звёздная", "Купчино", "Беговая", "Зенит", "Приморская", "Василеостровская", "Гостиный двор", "Маяковская", "Площадь Александра Невского", "Елизаровская", "Ломоносовская", "Пролетарская", "Обухово", "Рыбацкое", "Спасская", "Достоевская", "Лиговский проспект", "Площадь Александра Невского", "Новочеркасская", "Ладожская", "Проспект Большевиков", "Улица Дыбенко", "Комендантский проспект", "Старая Деревня", "Крестовский остров", "Чкаловская", "Спортивная", "Адмиралтейская", "Садовая", "Звенигородская", "Обводный канал", "Волковская", "Бухарестская", "Международная", "Проспект Славы", "Дунайская", "Шушары"};
    vector <vector<pair<int,int>>> graph_metro = {{{1, 3}}, {{0, 3}, {2, 3}}, {{1, 3}, {3, 2}}, {{2, 2}, {4, 3}}, {{3, 3}, {5, 3}}, {{4, 3}, {6, 3}}, {{5, 3}, {7, 2}}, {{6, 2}, {8, 3}}, {{7, 3}, {9, 2}}, {{8, 2}, {10, 2}, {42, 2}}, {{9, 2}, {11, 2}, {50, 2}}, {{10, 2}, {12, 2}, {64, 2}}, {{11, 2}, {13, 2}, {29, 1}}, {{12, 2}, {14, 3}}, {{13, 3}, {15, 4}}, {{14, 4}, {16, 2}}, {{15, 2}, {17, 3}}, {{16, 3}, {18, 2}}, {{17, 2}}, {{20, 3}}, {{19, 3}, {21, 2}}, {{20, 2}, {22, 3}}, {{21, 3}, {23, 3}}, {{22, 3}, {24, 3}}, {{23, 3}, {25, 4}}, {{24, 4}, {26, 2}}, {{25, 2}, {27, 4}}, {{26, 4}, {28, 2}, {41, 2}}, {{27, 2}, {29, 3}, {49, 3}, {63, 3}}, {{12, 1}, {28, 3}, {30, 2}}, {{29, 2}, {31, 2}}, {{30, 2}, {32, 2}}, {{31, 2}, {33, 2}}, {{32, 2}, {34, 3}}, {{33, 3}, {35, 4}}, {{34, 4}, {36, 3}}, {{35, 3}}, {{38, 4}}, {{37, 4}, {39, 4}}, {{38, 4}, {40, 4}}, {{39, 4}, {41, 4}}, {{27, 2}, {40, 4}, {42, 3}}, {{9, 2}, {41, 3}, {43, 3}}, {{42, 3}, {44, 5}, {52, 2}}, {{43, 5}, {45, 3}}, {{44, 3}, {46, 3}}, {{45, 3}, {47, 3}}, {{46, 3}, {48, 4}}, {{47, 4}}, {{28, 3}, {50, 4}, {63, 3}}, {{10, 2}, {49, 4}, {51, 2}}, {{50, 2}, {52, 2}}, {{43, 2}, {51, 2}, {53, 3}}, {{52, 3}, {54, 3}}, {{53, 3}, {55, 3}}, {{54, 3}, {56, 2}}, {{55, 2}}, {{58, 3}}, {{57, 3}, {59, 3}}, {{58, 3}, {60, 4}}, {{59, 4}, {61, 2}}, {{60, 2}, {62, 3}}, {{61, 3}, {63, 3}}, {{28, 3}, {49, 3}, {62, 3}, {64, 4}}, {{11, 2}, {63, 4}, {65, 3}}, {{64, 3}, {66, 3}}, {{65, 3}, {67, 3}}, {{66, 3}, {68, 3}}, {{67, 3}, {69, 2}}, {{68, 2}, {70, 3}}, {{69, 3}, {71, 3}}, {{70, 3}}};
    vector <int> result = Levit_Algorithm_path(13, graph_metro, 40, name_of_station);
    return 0;

}